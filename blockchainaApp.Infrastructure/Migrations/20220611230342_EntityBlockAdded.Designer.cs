// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using blockchainaApp.Infrastructure.Data;

namespace blockchainaApp.Infrastructure.Migrations
{
    [DbContext(typeof(BlockchainDbContext))]
    [Migration("20220611230342_EntityBlockAdded")]
    partial class EntityBlockAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("blockchainaApp.Domain.Entities.Block", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Nonce")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("previousBlockHash")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Block");
                });

            modelBuilder.Entity("blockchainaApp.Domain.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BlockId")
                        .HasColumnType("text");

                    b.Property<string>("NewState")
                        .HasColumnType("text");

                    b.Property<string>("PreviousState")
                        .HasColumnType("text");

                    b.Property<string>("TransactionMessage")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.Property<string>("WalletReceiver")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("blockchainaApp.Domain.Entities.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Owner")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("blockchainaApp.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("blockchainaApp.Domain.Entities.Block", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("BlockId");

                    b.HasOne("blockchainaApp.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId");

                    b.Navigation("Block");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("blockchainaApp.Domain.Entities.Block", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("blockchainaApp.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
